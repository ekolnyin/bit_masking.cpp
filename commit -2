#include <stdio.h>

// The following are Function prototypes
unsigned char clearBit(unsigned char byte, int bitPosition);
unsigned char toggleBit(unsigned char byte, int bitPosition);
void displayByte(const char* message, unsigned char byte);

int main(void) {
    // Define the starting byte with a value of 0x55 (01010101 in binary)
    unsigned char dataByte = 0x55;

    // Display the initial value of the byte
    displayByte("Initial data byte", dataByte);

    // Clear the 5th bit (bit position 4, counting from 0)
    dataByte = clearBit(dataByte, 4);

    // Display the byte after clearing the 5th bit
    displayByte("After clearing the 5th bit", dataByte);

    return 0;
}

// Function to clear a specific bit in a byte
unsigned char clearBit(unsigned char byte, int bitPosition) {
    /*
     Clearing a bit means setting it to 0 while leaving other bits unchanged.
     To do this:
     - We create a "mask" where only the bit at the target position is 0, and all others are 1.
     - Using bitwise AND (&) with this mask, the target bit is cleared, while other bits remain as they are.
    */
    return byte & ~(1 << bitPosition);
}

// Function to display the value of a byte
void displayByte(const char* message, unsigned char byte) {
    printf("%s: 0x%02X (", message, byte);
    for (int i = 7; i >= 0; i--) {
        printf("%d", (byte >> i) & 1);
    }
    printf(")\n");
}
